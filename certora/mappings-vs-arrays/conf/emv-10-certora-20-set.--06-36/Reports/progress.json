{
	RegisteredRule(rule=gasOptimizedCorrectnessOfAddValue, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=gasOptimizedCorrectnessOfUpdateValue, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=gasOptimizedCorrectnessOfRemoveValue, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=gasOptimizedCorrectnessOfGetValue, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=gasOptimizedCorrectnessOfBatchAdd, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=gasOptimizedCorrectnessOfClear, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=gasOptimizedCorrectnessOfGetState, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=envfreeFuncsStaticCheck, ruleType=spec.cvlast.SpecType$Group$StaticEnvFree@860ad929, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=A.values(uint256), ruleType=Static(contractFunction=A.values(uint256) returns (uint256)), parentCVLDeclarationId=envfreeFuncsStaticCheck, isCounted=true): true,
	RegisteredRule(rule=A.operationCount(), ruleType=Static(contractFunction=A.operationCount() returns (uint256)), parentCVLDeclarationId=envfreeFuncsStaticCheck, isCounted=true): true,
	RegisteredRule(rule=A.getLength(), ruleType=Static(contractFunction=A.getLength() returns (uint256)), parentCVLDeclarationId=envfreeFuncsStaticCheck, isCounted=true): true,
	RegisteredRule(rule=A.lastRemoved(), ruleType=Static(contractFunction=A.lastRemoved() returns (uint256)), parentCVLDeclarationId=envfreeFuncsStaticCheck, isCounted=true): true,
	RegisteredRule(rule=A.lastAdded(), ruleType=Static(contractFunction=A.lastAdded() returns (uint256)), parentCVLDeclarationId=envfreeFuncsStaticCheck, isCounted=true): true,
	RegisteredRule(rule=A.elementCount(), ruleType=Static(contractFunction=A.elementCount() returns (uint256)), parentCVLDeclarationId=envfreeFuncsStaticCheck, isCounted=true): true,
	RegisteredRule(rule=A.totalSum(), ruleType=Static(contractFunction=A.totalSum() returns (uint256)), parentCVLDeclarationId=envfreeFuncsStaticCheck, isCounted=true): true,
	RegisteredRule(rule=lastRemoved(), ruleType=Static(contractFunction=Ao.lastRemoved() returns (uint256)), parentCVLDeclarationId=envfreeFuncsStaticCheck, isCounted=true): true,
	RegisteredRule(rule=totalSum(), ruleType=Static(contractFunction=Ao.totalSum() returns (uint256)), parentCVLDeclarationId=envfreeFuncsStaticCheck, isCounted=true): true,
	RegisteredRule(rule=values(uint256), ruleType=Static(contractFunction=Ao.values(uint256) returns (uint256)), parentCVLDeclarationId=envfreeFuncsStaticCheck, isCounted=true): true,
	RegisteredRule(rule=operationCount(), ruleType=Static(contractFunction=Ao.operationCount() returns (uint256)), parentCVLDeclarationId=envfreeFuncsStaticCheck, isCounted=true): true,
	RegisteredRule(rule=getLength(), ruleType=Static(contractFunction=Ao.getLength() returns (uint256)), parentCVLDeclarationId=envfreeFuncsStaticCheck, isCounted=true): true,
	RegisteredRule(rule=lastAdded(), ruleType=Static(contractFunction=Ao.lastAdded() returns (uint256)), parentCVLDeclarationId=envfreeFuncsStaticCheck, isCounted=true): true,
	RegisteredRule(rule=elementCount(), ruleType=Static(contractFunction=Ao.elementCount() returns (uint256)), parentCVLDeclarationId=envfreeFuncsStaticCheck, isCounted=true): true,
	RegisteredRule(rule=exists(uint256), ruleType=Static(contractFunction=Ao.exists(uint256 _index) returns (bool)), parentCVLDeclarationId=envfreeFuncsStaticCheck, isCounted=true): true,
	RegisteredRule(rule=A.clear()-Ao.clear(), ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=A-Ao, isCounted=true): true,
	RegisteredRule(rule=A.getState()-Ao.getState(), ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=A-Ao, isCounted=true): true,
	RegisteredRule(rule=A.addValue(uint256)-Ao.addValue(uint256), ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=A-Ao, isCounted=true): true,
	RegisteredRule(rule=A.getValue(uint256)-Ao.getValue(uint256), ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=A-Ao, isCounted=true): true,
	RegisteredRule(rule=A.batchAdd(uint256[])-Ao.batchAdd(uint256[]), ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=A-Ao, isCounted=true): true,
	RegisteredRule(rule=A.updateValue(uint256,uint256)-Ao.updateValue(uint256,uint256), ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=A-Ao, isCounted=true): true,
	RegisteredRule(rule=A.removeValue(uint256)-Ao.removeValue(uint256), ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=A-Ao, isCounted=true): true,
	RegisteredRule(rule=rule_not_vacuous, ruleType=VacuityCheck(originalRule=CVLSingleRule(ruleIdentifier=gasOptimizedCorrectnessOfGetValue-A-Ao-A.getValue(uint256)-Ao.getValue(uint256), cvlRange=mappingarray.spec:142:1, params=[method f, method g], description=, goodDescription=, block=[Apply(cvlRange=mappingarray.spec:147:5, exp=gasOptimizationCorrectness(f,g), scope=(Spec file -> Rule gasOptimizedCorrectnessOfGetValue))], ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, scope=(Spec file -> Rule gasOptimizedCorrectnessOfGetValue), methodParamFilters=MethodParamFilters(cvlRange=mappingarray.spec:142:1, scope=(Spec file -> Rule gasOptimizedCorrectnessOfGetValue), methodParamToFilter={f=MethodParamFilter(methodParam=f, filterExp=f.selector == sig:A.getValue(uint256).selector, cvlRange=mappingarray.spec:144:5, scope=(Spec file -> Rule gasOptimizedCorrectnessOfGetValue)), g=MethodParamFilter(methodParam=g, filterExp=g.selector == sig:Ao.getValue(uint256).selector, cvlRange=mappingarray.spec:145:5, scope=(Spec file -> Rule gasOptimizedCorrectnessOfGetValue))}), ruleGenerationMeta=WithMethodInstantiations(sanity=PRE_SANITY_CHECK, cvlRange=[internally generated], instMethodSignatures=[A.getValue(uint256), Ao.getValue(uint256)]), isSatisfyRule=false)), parentCVLDeclarationId=A.getValue(uint256)-Ao.getValue(uint256), isCounted=true): true,
	RegisteredRule(rule=rule_not_vacuous, ruleType=VacuityCheck(originalRule=CVLSingleRule(ruleIdentifier=gasOptimizedCorrectnessOfRemoveValue-A-Ao-A.removeValue(uint256)-Ao.removeValue(uint256), cvlRange=mappingarray.spec:134:1, params=[method f, method g], description=, goodDescription=, block=[Apply(cvlRange=mappingarray.spec:139:5, exp=gasOptimizationCorrectness(f,g), scope=(Spec file -> Rule gasOptimizedCorrectnessOfRemoveValue))], ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, scope=(Spec file -> Rule gasOptimizedCorrectnessOfRemoveValue), methodParamFilters=MethodParamFilters(cvlRange=mappingarray.spec:134:1, scope=(Spec file -> Rule gasOptimizedCorrectnessOfRemoveValue), methodParamToFilter={f=MethodParamFilter(methodParam=f, filterExp=f.selector == sig:A.removeValue(uint256).selector, cvlRange=mappingarray.spec:136:5, scope=(Spec file -> Rule gasOptimizedCorrectnessOfRemoveValue)), g=MethodParamFilter(methodParam=g, filterExp=g.selector == sig:Ao.removeValue(uint256).selector, cvlRange=mappingarray.spec:137:5, scope=(Spec file -> Rule gasOptimizedCorrectnessOfRemoveValue))}), ruleGenerationMeta=WithMethodInstantiations(sanity=PRE_SANITY_CHECK, cvlRange=[internally generated], instMethodSignatures=[A.removeValue(uint256), Ao.removeValue(uint256)]), isSatisfyRule=false)), parentCVLDeclarationId=A.removeValue(uint256)-Ao.removeValue(uint256), isCounted=true): true,
	RegisteredRule(rule=rule_not_vacuous, ruleType=VacuityCheck(originalRule=CVLSingleRule(ruleIdentifier=gasOptimizedCorrectnessOfUpdateValue-A-Ao-A.updateValue(uint256,uint256)-Ao.updateValue(uint256,uint256), cvlRange=mappingarray.spec:126:1, params=[method f, method g], description=, goodDescription=, block=[Apply(cvlRange=mappingarray.spec:131:5, exp=gasOptimizationCorrectness(f,g), scope=(Spec file -> Rule gasOptimizedCorrectnessOfUpdateValue))], ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, scope=(Spec file -> Rule gasOptimizedCorrectnessOfUpdateValue), methodParamFilters=MethodParamFilters(cvlRange=mappingarray.spec:126:1, scope=(Spec file -> Rule gasOptimizedCorrectnessOfUpdateValue), methodParamToFilter={f=MethodParamFilter(methodParam=f, filterExp=f.selector == sig:A.updateValue(uint256, uint256).selector, cvlRange=mappingarray.spec:128:5, scope=(Spec file -> Rule gasOptimizedCorrectnessOfUpdateValue)), g=MethodParamFilter(methodParam=g, filterExp=g.selector == sig:Ao.updateValue(uint256, uint256).selector, cvlRange=mappingarray.spec:129:5, scope=(Spec file -> Rule gasOptimizedCorrectnessOfUpdateValue))}), ruleGenerationMeta=WithMethodInstantiations(sanity=PRE_SANITY_CHECK, cvlRange=[internally generated], instMethodSignatures=[A.updateValue(uint256,uint256), Ao.updateValue(uint256,uint256)]), isSatisfyRule=false)), parentCVLDeclarationId=A.updateValue(uint256,uint256)-Ao.updateValue(uint256,uint256), isCounted=true): true,
	RegisteredRule(rule=rule_not_vacuous, ruleType=VacuityCheck(originalRule=CVLSingleRule(ruleIdentifier=gasOptimizedCorrectnessOfClear-A-Ao-A.clear()-Ao.clear(), cvlRange=mappingarray.spec:158:1, params=[method f, method g], description=, goodDescription=, block=[Apply(cvlRange=mappingarray.spec:163:5, exp=gasOptimizationCorrectness(f,g), scope=(Spec file -> Rule gasOptimizedCorrectnessOfClear))], ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, scope=(Spec file -> Rule gasOptimizedCorrectnessOfClear), methodParamFilters=MethodParamFilters(cvlRange=mappingarray.spec:158:1, scope=(Spec file -> Rule gasOptimizedCorrectnessOfClear), methodParamToFilter={f=MethodParamFilter(methodParam=f, filterExp=f.selector == sig:A.clear().selector, cvlRange=mappingarray.spec:160:5, scope=(Spec file -> Rule gasOptimizedCorrectnessOfClear)), g=MethodParamFilter(methodParam=g, filterExp=g.selector == sig:Ao.clear().selector, cvlRange=mappingarray.spec:161:5, scope=(Spec file -> Rule gasOptimizedCorrectnessOfClear))}), ruleGenerationMeta=WithMethodInstantiations(sanity=PRE_SANITY_CHECK, cvlRange=[internally generated], instMethodSignatures=[A.clear(), Ao.clear()]), isSatisfyRule=false)), parentCVLDeclarationId=A.clear()-Ao.clear(), isCounted=true): true,
	RegisteredRule(rule=rule_not_vacuous, ruleType=VacuityCheck(originalRule=CVLSingleRule(ruleIdentifier=gasOptimizedCorrectnessOfGetState-A-Ao-A.getState()-Ao.getState(), cvlRange=mappingarray.spec:166:1, params=[method f, method g], description=, goodDescription=, block=[Apply(cvlRange=mappingarray.spec:171:5, exp=gasOptimizationCorrectness(f,g), scope=(Spec file -> Rule gasOptimizedCorrectnessOfGetState))], ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, scope=(Spec file -> Rule gasOptimizedCorrectnessOfGetState), methodParamFilters=MethodParamFilters(cvlRange=mappingarray.spec:166:1, scope=(Spec file -> Rule gasOptimizedCorrectnessOfGetState), methodParamToFilter={f=MethodParamFilter(methodParam=f, filterExp=f.selector == sig:A.getState().selector, cvlRange=mappingarray.spec:168:5, scope=(Spec file -> Rule gasOptimizedCorrectnessOfGetState)), g=MethodParamFilter(methodParam=g, filterExp=g.selector == sig:Ao.getState().selector, cvlRange=mappingarray.spec:169:5, scope=(Spec file -> Rule gasOptimizedCorrectnessOfGetState))}), ruleGenerationMeta=WithMethodInstantiations(sanity=PRE_SANITY_CHECK, cvlRange=[internally generated], instMethodSignatures=[A.getState(), Ao.getState()]), isSatisfyRule=false)), parentCVLDeclarationId=A.getState()-Ao.getState(), isCounted=true): true
}