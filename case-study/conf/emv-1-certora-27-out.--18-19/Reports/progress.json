{
	RegisteredRule(rule=gasOptimizedCorrectnessOfApprove, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=gasOptimizedCorrectnessOfTransfer, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=gasOptimizedCorrectnessOfCreateStream, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=gasOptimizedCorrectnessOfWithdrawFromStream, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=gasOptimizedCorrectnessOfCancelStream, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=gasOptimizedCorrectnessOfDeltaOf, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=gasOptimizedCorrectnessOfBalanceOf, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=gasOptimizedCorrectnessOfIsFundsAdmin, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=gasOptimizedCorrectnessOfGetNextStreamId, ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=envfreeFuncsStaticCheck, ruleType=spec.cvlast.SpecType$Group$StaticEnvFree@860ad929, parentCVLDeclarationId=null, isCounted=true): true,
	RegisteredRule(rule=isFundsAdmin(address), ruleType=Static(contractFunction=CollectorOptimized.isFundsAdmin(address admin) returns (bool)), parentCVLDeclarationId=envfreeFuncsStaticCheck, isCounted=true): true,
	RegisteredRule(rule=getNextStreamId(), ruleType=Static(contractFunction=CollectorOptimized.getNextStreamId() returns (uint256)), parentCVLDeclarationId=envfreeFuncsStaticCheck, isCounted=true): true,
	RegisteredRule(rule=hasRole(bytes32,address), ruleType=Static(contractFunction=CollectorOptimized.hasRole(bytes32 role, address account) returns (bool)), parentCVLDeclarationId=envfreeFuncsStaticCheck, isCounted=true): true,
	RegisteredRule(rule=CollectorOriginal.isFundsAdmin(address), ruleType=Static(contractFunction=CollectorOriginal.isFundsAdmin(address admin) returns (bool)), parentCVLDeclarationId=envfreeFuncsStaticCheck, isCounted=true): true,
	RegisteredRule(rule=CollectorOriginal.getNextStreamId(), ruleType=Static(contractFunction=CollectorOriginal.getNextStreamId() returns (uint256)), parentCVLDeclarationId=envfreeFuncsStaticCheck, isCounted=true): true,
	RegisteredRule(rule=CollectorOriginal.hasRole(bytes32,address), ruleType=Static(contractFunction=CollectorOriginal.hasRole(bytes32 role, address account) returns (bool)), parentCVLDeclarationId=envfreeFuncsStaticCheck, isCounted=true): true,
	RegisteredRule(rule=CollectorOriginal.getNextStreamId()-CollectorOptimized.getNextStreamId(), ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=CollectorOptimized-CollectorOriginal, isCounted=true): true,
	RegisteredRule(rule=CollectorOriginal.isFundsAdmin(address)-CollectorOptimized.isFundsAdmin(address), ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=CollectorOptimized-CollectorOriginal, isCounted=true): true,
	RegisteredRule(rule=CollectorOriginal.deltaOf(uint256)-CollectorOptimized.deltaOf(uint256), ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=CollectorOptimized-CollectorOriginal, isCounted=true): true,
	RegisteredRule(rule=CollectorOriginal.createStream(address,uint256,address,uint256,uint256)-CollectorOptimized.createStream(address,uint256,address,uint256,uint256), ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=CollectorOptimized-CollectorOriginal, isCounted=true): true,
	RegisteredRule(rule=CollectorOriginal.balanceOf(uint256,address)-CollectorOptimized.balanceOf(uint256,address), ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=CollectorOptimized-CollectorOriginal, isCounted=true): true,
	RegisteredRule(rule=CollectorOriginal.approve(address,address,uint256)-CollectorOptimized.approve(address,address,uint256), ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=CollectorOptimized-CollectorOriginal, isCounted=true): true,
	RegisteredRule(rule=CollectorOriginal.transfer(address,address,uint256)-CollectorOptimized.transfer(address,address,uint256), ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=CollectorOptimized-CollectorOriginal, isCounted=true): true,
	RegisteredRule(rule=CollectorOriginal.withdrawFromStream(uint256,uint256)-CollectorOptimized.withdrawFromStream(uint256,uint256), ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=CollectorOptimized-CollectorOriginal, isCounted=true): true,
	RegisteredRule(rule=CollectorOriginal.cancelStream(uint256)-CollectorOptimized.cancelStream(uint256), ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, parentCVLDeclarationId=CollectorOptimized-CollectorOriginal, isCounted=true): true,
	RegisteredRule(rule=rule_not_vacuous, ruleType=VacuityCheck(originalRule=CVLSingleRule(ruleIdentifier=gasOptimizedCorrectnessOfBalanceOf-CollectorOptimized-CollectorOriginal-CollectorOriginal.balanceOf(uint256,address)-CollectorOptimized.balanceOf(uint256,address), cvlRange=Collector.spec:444:1, params=[method f, method g], description=, goodDescription=, block=[Apply(cvlRange=Collector.spec:449:5, exp=gasOptimizationCorrectness(f,g), scope=(Spec file -> Rule gasOptimizedCorrectnessOfBalanceOf))], ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, scope=(Spec file -> Rule gasOptimizedCorrectnessOfBalanceOf), methodParamFilters=MethodParamFilters(cvlRange=Collector.spec:444:1, scope=(Spec file -> Rule gasOptimizedCorrectnessOfBalanceOf), methodParamToFilter={f=MethodParamFilter(methodParam=f, filterExp=f.selector == sig:CollectorOriginal.balanceOf(uint256, address).selector, cvlRange=Collector.spec:446:5, scope=(Spec file -> Rule gasOptimizedCorrectnessOfBalanceOf)), g=MethodParamFilter(methodParam=g, filterExp=g.selector == sig:CollectorOptimized.balanceOf(uint256, address).selector, cvlRange=Collector.spec:447:5, scope=(Spec file -> Rule gasOptimizedCorrectnessOfBalanceOf))}), ruleGenerationMeta=WithMethodInstantiations(sanity=PRE_SANITY_CHECK, cvlRange=[internally generated], instMethodSignatures=[CollectorOriginal.balanceOf(uint256,address), CollectorOptimized.balanceOf(uint256,address)]), isSatisfyRule=false)), parentCVLDeclarationId=CollectorOriginal.balanceOf(uint256,address)-CollectorOptimized.balanceOf(uint256,address), isCounted=true): true,
	RegisteredRule(rule=rule_not_vacuous, ruleType=VacuityCheck(originalRule=CVLSingleRule(ruleIdentifier=gasOptimizedCorrectnessOfDeltaOf-CollectorOptimized-CollectorOriginal-CollectorOriginal.deltaOf(uint256)-CollectorOptimized.deltaOf(uint256), cvlRange=Collector.spec:436:1, params=[method f, method g], description=, goodDescription=, block=[Apply(cvlRange=Collector.spec:441:5, exp=gasOptimizationCorrectness(f,g), scope=(Spec file -> Rule gasOptimizedCorrectnessOfDeltaOf))], ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, scope=(Spec file -> Rule gasOptimizedCorrectnessOfDeltaOf), methodParamFilters=MethodParamFilters(cvlRange=Collector.spec:436:1, scope=(Spec file -> Rule gasOptimizedCorrectnessOfDeltaOf), methodParamToFilter={f=MethodParamFilter(methodParam=f, filterExp=f.selector == sig:CollectorOriginal.deltaOf(uint256).selector, cvlRange=Collector.spec:438:5, scope=(Spec file -> Rule gasOptimizedCorrectnessOfDeltaOf)), g=MethodParamFilter(methodParam=g, filterExp=g.selector == sig:CollectorOptimized.deltaOf(uint256).selector, cvlRange=Collector.spec:439:5, scope=(Spec file -> Rule gasOptimizedCorrectnessOfDeltaOf))}), ruleGenerationMeta=WithMethodInstantiations(sanity=PRE_SANITY_CHECK, cvlRange=[internally generated], instMethodSignatures=[CollectorOriginal.deltaOf(uint256), CollectorOptimized.deltaOf(uint256)]), isSatisfyRule=false)), parentCVLDeclarationId=CollectorOriginal.deltaOf(uint256)-CollectorOptimized.deltaOf(uint256), isCounted=true): true,
	RegisteredRule(rule=rule_not_vacuous, ruleType=VacuityCheck(originalRule=CVLSingleRule(ruleIdentifier=gasOptimizedCorrectnessOfGetNextStreamId-CollectorOptimized-CollectorOriginal-CollectorOriginal.getNextStreamId()-CollectorOptimized.getNextStreamId(), cvlRange=Collector.spec:460:1, params=[method f, method g], description=, goodDescription=, block=[Apply(cvlRange=Collector.spec:465:5, exp=gasOptimizationCorrectness(f,g), scope=(Spec file -> Rule gasOptimizedCorrectnessOfGetNextStreamId))], ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, scope=(Spec file -> Rule gasOptimizedCorrectnessOfGetNextStreamId), methodParamFilters=MethodParamFilters(cvlRange=Collector.spec:460:1, scope=(Spec file -> Rule gasOptimizedCorrectnessOfGetNextStreamId), methodParamToFilter={f=MethodParamFilter(methodParam=f, filterExp=f.selector == sig:CollectorOriginal.getNextStreamId().selector, cvlRange=Collector.spec:462:5, scope=(Spec file -> Rule gasOptimizedCorrectnessOfGetNextStreamId)), g=MethodParamFilter(methodParam=g, filterExp=g.selector == sig:CollectorOptimized.getNextStreamId().selector, cvlRange=Collector.spec:463:5, scope=(Spec file -> Rule gasOptimizedCorrectnessOfGetNextStreamId))}), ruleGenerationMeta=WithMethodInstantiations(sanity=PRE_SANITY_CHECK, cvlRange=[internally generated], instMethodSignatures=[CollectorOriginal.getNextStreamId(), CollectorOptimized.getNextStreamId()]), isSatisfyRule=false)), parentCVLDeclarationId=CollectorOriginal.getNextStreamId()-CollectorOptimized.getNextStreamId(), isCounted=true): true,
	RegisteredRule(rule=rule_not_vacuous, ruleType=VacuityCheck(originalRule=CVLSingleRule(ruleIdentifier=gasOptimizedCorrectnessOfIsFundsAdmin-CollectorOptimized-CollectorOriginal-CollectorOriginal.isFundsAdmin(address)-CollectorOptimized.isFundsAdmin(address), cvlRange=Collector.spec:452:1, params=[method f, method g], description=, goodDescription=, block=[Apply(cvlRange=Collector.spec:457:5, exp=gasOptimizationCorrectness(f,g), scope=(Spec file -> Rule gasOptimizedCorrectnessOfIsFundsAdmin))], ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, scope=(Spec file -> Rule gasOptimizedCorrectnessOfIsFundsAdmin), methodParamFilters=MethodParamFilters(cvlRange=Collector.spec:452:1, scope=(Spec file -> Rule gasOptimizedCorrectnessOfIsFundsAdmin), methodParamToFilter={f=MethodParamFilter(methodParam=f, filterExp=f.selector == sig:CollectorOriginal.isFundsAdmin(address).selector, cvlRange=Collector.spec:454:5, scope=(Spec file -> Rule gasOptimizedCorrectnessOfIsFundsAdmin)), g=MethodParamFilter(methodParam=g, filterExp=g.selector == sig:CollectorOptimized.isFundsAdmin(address).selector, cvlRange=Collector.spec:455:5, scope=(Spec file -> Rule gasOptimizedCorrectnessOfIsFundsAdmin))}), ruleGenerationMeta=WithMethodInstantiations(sanity=PRE_SANITY_CHECK, cvlRange=[internally generated], instMethodSignatures=[CollectorOriginal.isFundsAdmin(address), CollectorOptimized.isFundsAdmin(address)]), isSatisfyRule=false)), parentCVLDeclarationId=CollectorOriginal.isFundsAdmin(address)-CollectorOptimized.isFundsAdmin(address), isCounted=true): true,
	RegisteredRule(rule=rule_not_vacuous, ruleType=VacuityCheck(originalRule=CVLSingleRule(ruleIdentifier=gasOptimizedCorrectnessOfApprove-CollectorOptimized-CollectorOriginal-CollectorOriginal.approve(address,address,uint256)-CollectorOptimized.approve(address,address,uint256), cvlRange=Collector.spec:396:1, params=[method f, method g], description=, goodDescription=, block=[Apply(cvlRange=Collector.spec:401:5, exp=gasOptimizationCorrectness(f,g), scope=(Spec file -> Rule gasOptimizedCorrectnessOfApprove))], ruleType=spec.cvlast.SpecType$Single$FromUser$SpecFile@5436ad87, scope=(Spec file -> Rule gasOptimizedCorrectnessOfApprove), methodParamFilters=MethodParamFilters(cvlRange=Collector.spec:396:1, scope=(Spec file -> Rule gasOptimizedCorrectnessOfApprove), methodParamToFilter={f=MethodParamFilter(methodParam=f, filterExp=f.selector == sig:CollectorOriginal.approve(address, address, uint256).selector, cvlRange=Collector.spec:398:5, scope=(Spec file -> Rule gasOptimizedCorrectnessOfApprove)), g=MethodParamFilter(methodParam=g, filterExp=g.selector == sig:CollectorOptimized.approve(address, address, uint256).selector, cvlRange=Collector.spec:399:5, scope=(Spec file -> Rule gasOptimizedCorrectnessOfApprove))}), ruleGenerationMeta=WithMethodInstantiations(sanity=PRE_SANITY_CHECK, cvlRange=[internally generated], instMethodSignatures=[CollectorOriginal.approve(address,address,uint256), CollectorOptimized.approve(address,address,uint256)]), isSatisfyRule=false)), parentCVLDeclarationId=CollectorOriginal.approve(address,address,uint256)-CollectorOptimized.approve(address,address,uint256), isCounted=true): true
}